{"version":3,"sources":["types/Status.ts","features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Status","actions","todo","type","payload","currentTodoReducer","state","action","initialState","status","All","query","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","length","className","map","completed","id","title","cn","onClick","currentTodoActions","TodoFilter","onSubmit","event","preventDefault","onChange","target","value","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","getUserFromServer","a","userId","usersFromServer","Error","useEffect","href","App","isLoading","setIsLoading","loadTodos","loadedTodos","queryToLower","toLowerCase","includes","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.dc43b8bb.chunk.js","sourcesContent":["export enum Status {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n","import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetFilterAction = {\n  type: 'filter/SET',\n  payload: Status,\n};\n\ntype SetQueryAction = {\n  type: 'query/SET',\n  payload: string,\n};\n\nconst setFilter = (status: Status): SetFilterAction => ({\n  type: 'filter/SET',\n  payload: status,\n});\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'query/SET',\n  payload: query,\n});\n\nconst initialState = {\n  status: Status.All,\n  query: '',\n};\n\ntype Action = SetFilterAction | SetQueryAction;\n\nexport const actions = { setFilter, setQuery };\n\nconst filterReducer = (\n  state = initialState,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filter/SET':\n      return {\n        ...state,\n        status: action.payload,\n      };\n    case 'query/SET':\n      return {\n        ...state,\n        query: action.payload,\n      };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = { type: 'todos/SET', payload: Todo[] };\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: todos,\n});\n\nexport const actions = { setTodos };\n\ntype Todos = Todo[] | [];\n\nconst todosReducer = (\n  state: Todos = [],\n  action: SetTodosAction,\n) : Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React from 'react';\nimport cn from 'classnames';\nimport { useDispatch } from 'react-redux';\nimport { useAppSelector } from '../../app/hooks';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector(state => state.todos);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      {!todos.length ? (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      ) : (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n          <tbody>\n            {todos.map(todo => {\n              const { completed, id, title } = todo;\n\n              return (\n                <tr data-cy=\"todo\" key={id}>\n                  <td className=\"is-vcentered\">{id}</td>\n                  <td className=\"is-vcentered\">\n                    {completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n                  <td className=\"is-vcentered is-expanded\">\n                    <p className={cn({\n                      'has-text-success': completed,\n                      'has-text-danger': !completed,\n                    })}\n                    >\n                      {title}\n                    </p>\n                  </td>\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => dispatch(currentTodoActions.setTodo(todo))}\n                    >\n                      <span className=\"icon\">\n                        <i className={cn({\n                          'far fa-eye-slash': currentTodo?.id === id,\n                          'far fa-eye': currentTodo?.id !== id,\n                        })}\n                        />\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const query = useAppSelector(state => state.filter.query);\n\n  const handleChangeStatus = (event:React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(actions.setFilter(event.target.value as Status));\n  };\n\n  const handleChangeQuery = (event:React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(actions.setQuery(event.target.value));\n  };\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select data-cy=\"statusSelect\" onChange={handleChangeStatus}>\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          value={query}\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={handleChangeQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              aria-label=\"clear search\"\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { useAppSelector } from '../../app/hooks';\nimport { getUser } from '../../api';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\nimport { User } from '../../types/User';\n\nexport const TodoModal: React.FC = () => {\n  const [user, setUser] = useState<User | null>();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useDispatch();\n\n  const getUserFromServer = async () => {\n    if (!currentTodo?.userId) {\n      return;\n    }\n\n    try {\n      const usersFromServer = await getUser(currentTodo.userId);\n\n      setUser(usersFromServer);\n    } catch {\n      throw new Error('user loading error');\n    }\n  };\n\n  useEffect(() => {\n    getUserFromServer();\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      { !user ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo ${currentTodo?.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              aria-label=\"modal-close\"\n              onClick={() => dispatch(currentTodoActions.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo?.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo?.completed ? (\n                <strong className=\"has-text-danger\">Planned</strong>\n              ) : (\n                <strong className=\"has-text-success\">Done</strong>\n              )}\n              {' by '}\n              <a href=\"mailto:Sincere@april.biz\">Leanne Graham</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport React, { useEffect, useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { actions } from './features/todos';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { getTodos } from './api';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const status = useAppSelector(state => state.filter.status);\n  const query = useAppSelector(state => state.filter.query);\n  const currentTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  const loadTodos = async () => {\n    setIsLoading(true);\n\n    try {\n      let loadedTodos = await getTodos();\n\n      switch (status) {\n        case 'all':\n          break;\n\n        case 'active':\n          loadedTodos = loadedTodos.filter(todo => !todo.completed);\n          break;\n\n        case 'completed':\n          loadedTodos = loadedTodos.filter(todo => todo.completed);\n          break;\n\n        default:\n          break;\n      }\n\n      const queryToLower = query.toLowerCase();\n\n      loadedTodos = loadedTodos.filter(todo => {\n        const todoTitleToLower = todo.title.toLowerCase();\n\n        return todoTitleToLower.includes(queryToLower);\n      });\n\n      dispatch(actions.setTodos(loadedTodos));\n    } catch (error) {\n      throw new Error('Error loading todos');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadTodos();\n  }, [status, query]);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n              {!isLoading && <TodoList />}\n\n            </div>\n          </div>\n        </div>\n      </div>\n\n      { currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}